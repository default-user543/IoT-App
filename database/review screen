import requests
import datetime
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.screenmanager import Screen
from kivy.app import App
from kivy.uix.popup import Popup

REVIEWS_URL = "https://app-du-lich-4d8a4.asia-southeast1.firebasedatabase.app/reviews.json"

class ReviewScreen(Screen):
    def on_enter(self):
        self.load_zones()
        self.display_welcome()
        self.load_reviews()

    def display_welcome(self):
        user = App.get_running_app().current_user
        name = user.get("Username", "User")
        self.ids.welcome_label.text = f"Welcome {name}!"

    def load_zones(self):
        zone_names = list(ZONE_DATA["zones"].keys())
        self.ids.zone_spinner.values = zone_names
        if zone_names:
            self.ids.zone_spinner.text = zone_names[0]

    def load_reviews(self):
        user = App.get_running_app().current_user
        response = requests.get(REVIEWS_URL)
        if response.status_code == 200:
            all_reviews = response.json() or {}
            user_reviews = [
                {"key": key, **review} for key, review in all_reviews.items()
                if review.get("UserID") == user["UserID"]
            ]
            self.display_reviews(user_reviews)

    def display_reviews(self, reviews):
        container = self.ids.reviews_container
        container.clear_widgets()
        for review in reviews:
            box = BoxLayout(orientation='horizontal', size_hint_y=None, height=40)
            box.add_widget(Label(text=review.get("Zone"), size_hint_x=0.3))
            box.add_widget(Label(text=review.get("Content"), size_hint_x=0.4))
            edit_btn = Button(text="Edit", size_hint_x=0.15)
            delete_btn = Button(text="Delete", size_hint_x=0.15)
            edit_btn.bind(on_release=lambda btn, r=review: self.edit_review(r))
            delete_btn.bind(on_release=lambda btn, r=review: self.delete_review(r))
            box.add_widget(edit_btn)
            box.add_widget(delete_btn)
            container.add_widget(box)

    def submit_review(self):
        content = self.ids.review_input.text.strip()
        zone = self.ids.zone_spinner.text
        if not content or zone == "Select Zone":
            self.show_popup("Error", "Please write review and select zone")
            return
        user = App.get_running_app().current_user
        review_data = {
            "UserID": user["UserID"],
            "Content": content,
            "Zone": zone,
            "Time": datetime.datetime.now().isoformat()
        }
        requests.post(REVIEWS_URL, json=review_data)
        self.ids.review_input.text = ""
        self.load_reviews()

    def edit_review(self, review):
        self.ids.review_input.text = review["Content"]
        self.ids.zone_spinner.text = review["Zone"]
        self.current_edit_key = review["key"]

    def delete_review(self, review):
        key = review["key"]
        requests.delete(f"{REVIEWS_URL.rstrip('.json')}/{key}.json")
        self.load_reviews()

    def show_popup(self, title, message):
        popup = Popup(title=title,
                      content=Label(text=message),
                      size_hint=(None, None), size=(400, 200))
        popup.open()
